testing file for "2-matrix_divided()"
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Base cases:

>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, -2))
[[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 2.5))
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, True))
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

>>> matrix = [[1, 2, 3]]
>>> print(matrix_divided(matrix, 1))
[[1.0, 2.0, 3.0]]

>>> matrix_divided(1, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(None, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[],[]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[2],[2]], [2])
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix_divided([[2], [2, 2]], 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> matrix_divided(2)
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'
